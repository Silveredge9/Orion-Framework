//--------------------------------------------------------------------------------------------------------------------------------------
// GRID SYSTEM
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Grid system container, columns and optional rows. Specify responsive breakpoints in /data/config.js.
*/


// BASE & ELEMENTS
//--------------------------------------------------------------------------------------------------------------------------------------

/*
<div class="o-container">
	<div class="o-col-4 o-col-1@md"></div>
	<div class="o-col-4 o-col-5@md"></div>
	<div class="o-col-4 o-col-6@md"></div>
</div>
*/

/*
This approach avoids repetition of non-dynamic styles across responsive classes
*/

[class*="o-container"] {
	margin:0px auto;
	@include clearfix();
	box-sizing:content-box;
}

[class*="o-col"] {
	float: left;
	box-sizing:border-box; 
}


// CREATE  CONTAINER MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_container($responsive, $maxWidth, $containerPadding) {

	// Set Base Container
	.o-container {
		@if $responsive == true {
			max-width:$maxWidth;
		}
		@else {
			width:$maxWidth;
		}
		padding: 0 ($containerPadding / 2) 0 ($containerPadding / 2);
	}

}


// CREATE ROW  MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_row($gutter) {
	.o-row {
		margin-left:-$gutter / 2;
		margin-right:-$gutter / 2;
		@include clearfix();
	}
}


// CREATE COLUMNS MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_columns($suffix, $maxWidth, $columns, $gutter) {

	// Calculate single column width in pixels
	$widthPX: $maxWidth / $columns;

	// Calculate single column width in percentage
	$widthPercentageSingle: ($widthPX / $maxWidth) * 100%;

	// Define Individual Grid Classes
	@for $i from 1 to ($columns + 1) {

		// Multiple width % by the column size
		$widthPercentage: $widthPercentageSingle * $i;

		// Example: o-col-6@md
		.o-col-#{$i}#{$suffix} {
			width: $widthPercentage;
			padding-left:$gutter / 2;
			padding-right:$gutter / 2;
			margin-left:0;
			clear:none;
		}
	}
}


// CREATE COLUMN OFFSETS  MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_offsets($suffix, $maxWidth, $columns) {

	// Calculate single column width in pixels
	$widthPX: $maxWidth / $columns;

	// Calculate single column width in percentage
	$widthPercentageSingle: ($widthPX / $maxWidth) * 100%;

	// Define Grid Offsets
	@for $i from 1 to $columns {

		// Multiple width % by the column size
		$widthPercentage: $widthPercentageSingle * $i;

		// Example u-col-offset-4@md
		.o-col-offset-#{$i}#{$suffix}	{
			margin-left:$widthPercentage;
		}

	}
}


// CREATE GRID UTILITY CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_utilities($suffix) {
	.o-col-clear#{$suffix} {
		clear:both;
	}
}


// GENERATE DEFAULT CONTAINER AND COLUMN CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

@include create_container($responsive, $maxWidth, $containerPadding);
@include create_row($gutter);
@include create_columns(null, $maxWidth, $columns, $gutter);
@include create_offsets(null, $maxWidth, $columns);
@include create_utilities(null);


// GENERATE RESPONSIVE CONTAINER AND GRID CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

// Generate repsonsive classes and containers. If we need to change grid as per responsive container config redefine variables
@each $bp-name, $bp-value in $breakpoints	{

	// If we discover that a morph comes into play override grid variables
	@if variable-exists(gridMorph) {
		@if map-has-key($gridMorph, $bp-name) {

			// Get grid match
			$bp-obj: map-get($gridMorph, $bp-name);

			// If present, feed variables into next round of column and creation
			@if map-has-key($bp-obj, "max-width") {
				$maxWidth: map-get($bp-obj, "max-width");
			}
			@if map-has-key($bp-obj, "columns") {
				$columns: map-get($bp-obj, "columns");
			}
			@if map-has-key($bp-obj, "containerPadding") {
				$containerPadding: map-get($bp-obj, "containerPadding");
			}
			@if map-has-key($bp-obj, "gutter") {
				$gutter: map-get($bp-obj, "gutter");
			}

			@include bp(#{$bp-name}) {
				@include create_container($responsive, $maxWidth, $containerPadding);
				@include create_row($gutter);	
			}

			// Gutter is column focused rather than container so needs to treated differently
			@if map-has-key($bp-obj, "gutter") {				
				@include bp(#{$bp-name}) {
					[class^="o-col"] {
						padding-left:$gutter / 2;
						padding-right:$gutter / 2;
					}
				}
			}
		}
	}

	@include bp(#{$bp-name}) {
		@include create_columns(\@#{$bp-name}, $maxWidth, $columns, $gutter);
		@include create_offsets(\@#{$bp-name}, $maxWidth, $columns);
		@include create_utilities(\@#{$bp-name});	
	}
}


// FLUID CONTAINER MODIFIER
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Removes all width instances from container, making it stretch 100%
*/

.o-container--fluid {
	max-width:none;
	width:100%;
}


// FLUSH COLUMN PADDING MODIFIERS
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Makes sure there's no gutter between columns
*/

.o-col--flush { 
	padding-left:0;
	padding-right:0;
}

// Flush column when breakpoint is hit
@each $bp-name, $bp-value in $breakpoints {
	@include bp(#{$bp-name}) {
		.o-col--flush\@#{$bp-name} { 
			padding-left:0;
			padding-right:0;
		}
	}
}

// Flush column until breakpoint is hit
@each $bp-name, $bp-value in $breakpoints {
	@include bpMax(#{$bp-name}) {
		.o-col--flush\@max-#{$bp-name} { 
			padding-left:0;
			padding-right:0;
		}
	}
}


/*
Makes sure there's no left gutter between columns
*/

.o-col--flush-left { 
	padding-left:0;
}

// Flush column when the breakpoint is hit
@each $bp-name, $bp-value in $breakpoints {
	@include bp(#{$bp-name}) {
		.o-col--flush-left\@#{$bp-name} { 
			padding-left:0;
		}
	}
}

// Flush column until the breakpoint is hit
@each $bp-name, $bp-value in $breakpoints {
	@include bpMax(#{$bp-name}) {
		.o-col--flush-left\@max-#{$bp-name} { 
			padding-left:0;
		}
	}
}


/*
Makes sure there's no right gutter between columns
*/

.o-col--flush-right { 
	padding-right:0;
}

// Flush column when the breakpoint is hit
@each $bp-name, $bp-value in $breakpoints {
	@include bp(#{$bp-name}) {
		.o-col--flush-right\@#{$bp-name} { 
			padding-right:0;
		}
	}
}

// Flush column until the breakpoint is hit
@each $bp-name, $bp-value in $breakpoints {
	@include bpMax(#{$bp-name}) {
		.o-col--flush-right\@max-#{$bp-name} { 
			padding-right:0;
		}
	}
}