//--------------------------------------------------------------------------------------------------------------------------------------
// GRID SYSTEM
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Grid system container, columns and optional rows. Specify responsive breakpoints in /data/config.js.
*/


// BASIC USAGE
//--------------------------------------------------------------------------------------------------------------------------------------

/*
<div class="o-container">
	<div class="o-col-4 o-col-1@md"></div>
	<div class="o-col-4 o-col-5@md"></div>
	<div class="o-col-4 o-col-6@md"></div>
</div>
*/


// MODIFIERS
//--------------------------------------------------------------------------------------------------------------------------------------

// Makes the container full width

/*
<div class="o-container o-container--full">
	<div class="o-col-4 o-col-1@md"></div>
	<div class="o-col-4 o-col-5@md"></div>
	<div class="o-col-4 o-col-6@md"></div>
</div>
*/


// CREATE  CONTAINER MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_container($responsive, $maxWidth, $columns, $gutter, $padding) {

	// Set Base Container
	.o-container {
		@if $responsive == true {
			max-width:$maxWidth;
		}
		@else {
			width:$maxWidth;
		}
		@include clearfix();
		margin:0px auto;
		position:relative;
		padding: 0 $padding 0 $padding;
		box-sizing: content-box;
	}

	//
	.o-container--full {
		max-width:100%;
		padding: 0; 
	}
}


// CREATE COLUMNS MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_columns($prefix, $responsive, $maxWidth, $columns, $gutter, $padding) {

	// Calculate single column width in pixels
	$widthPX: $maxWidth / $columns;

	// Calculate single column width in percentage
	$widthPercentage: ($widthPX / $maxWidth) * 100%;

	// Define Individual Grid Classes
	@for $i from 1 to $columns {

		// Calculate responsive grid sizes if required
		@if $responsive == true {

			// Multiple width % by the column size
			$widthPercentage: $widthPercentage * $i;

			// Example: o-col-6@md
			.o-col-#{$i}#{$prefix} {
				width: $widthPercentage;
				float: left;
				padding-left:$gutter / 2;
				padding-right:$gutter / 2;
				box-sizing: border-box;
			}

		}
		@else
		{
			// Example o-col-6
			.o-col-#{$i} {
				width: $widthPX;
				float: left;
				padding-left: $gutter / 2;
				padding-right: $gutter / 2;
				box-sizing: border-box;
			}
		}
	}

	// Define Additional Full Width Variants & Clear Classes For Responsive Classes Only
	@if $prefix != "col" {
		// Example 	o-col-full@md
		.o-col-full#{$prefix} {
			width:100%;
			float:none;
			clear:both;
			margin-left:0;
			box-sizing: border-box;
		}
	}
}


// GENERATE DEFAULT CONTAINER AND COLUMN CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

@include create_container($responsive, $defaultMaxWidth, $defaultColumns, $defaultGutter, $defaultPadding);
@include create_columns(null, $responsive, $defaultMaxWidth, $defaultColumns, $defaultGutter, $defaultPadding);


// CREATE ROW OBJECT
//--------------------------------------------------------------------------------------------------------------------------------------

.o-row {
	margin-left:-$gutter;
	margin-right:-$gutter;
	@include clearfix();
}


// GENERATE RESPONSIVE CONTAINER AND GRID CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

// Generate repsonsive classes and containers. If we need to change grid as per responsive container config redefine variables
@each $bp-name, $bp-value in $breakpoints	{

	@if variable-exists(gridResponsive) {
		@if map-has-key($gridResponsive, $bp-name) {

			// Get grid match
			$bp-obj: map-get($gridResponsive, $bp-name);

			$columnWidth: map-get($bp-obj, "column width");
			$gutter: map-get($bp-obj, "gutter");
			$columns: map-get($bp-obj, "columns");
			$padding: map-get($bp-obj, "outer padding");

			@include bp(#{$bp-name}) {
				@include create_container($columnWidth, $columns, $gutter, $padding, $responsive);
			}
		}
	}

	@include bp(#{$bp-name}) {
		@include create_columns(\@#{$bp-name}, $columnWidth, $columns, $gutter, $padding, $responsive);
	}
}