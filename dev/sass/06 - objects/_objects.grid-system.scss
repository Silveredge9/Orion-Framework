//--------------------------------------------------------------------------------------------------------------------------------------
// GRID SYSTEM
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Grid system container, columns and optional rows. Specify responsive breakpoints in /data/config.js.
*/


// BASE & ELEMENTS
//--------------------------------------------------------------------------------------------------------------------------------------

/*
<div class="o-container">
	<div class="o-col-4 o-col-1@md"></div>
	<div class="o-col-4 o-col-5@md"></div>
	<div class="o-col-4 o-col-6@md"></div>
</div>
*/

/*
This approach avoids repetition of non-dynamic styles across responsive classes
*/

[class*="o-container"] {
	position:relative;
	margin:0px auto;
	@include clearfix();
	box-sizing:content-box;
}

[class*="o-col"] {
	float: left;
	clear:none;
	box-sizing:border-box;
}


// CREATE  CONTAINER MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_container($responsive, $maxWidth, $columns, $gutter, $containerPadding) {

	// Set Base Container
	.o-container {
		@if $responsive == true {
			max-width:$maxWidth;
		}
		@else {
			width:$maxWidth;
		}
		padding: 0 ($containerPadding / 2) 0 ($containerPadding / 2);
	}

}


// CREATE ROW  MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_row($gutter) {
	.o-row {
		margin-left:-$gutter / 2;
		margin-right:-$gutter / 2;
		@include clearfix();
	}
}


// CREATE COLUMNS MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_columns($suffix, $responsive, $maxWidth, $columns, $gutter) {

	// Calculate single column width in pixels
	$widthPX: $maxWidth / $columns;

	// Calculate single column width in percentage
	$widthPercentageSingle: ($widthPX / $maxWidth) * 100%;

	// Define Individual Grid Classes
	@for $i from 1 to ($columns + 1) {

		// Calculate responsive grid sizes if required
		@if $responsive == true {

			// Multiple width % by the column size
			$widthPercentage: $widthPercentageSingle * $i;

			// Example: o-col-6@md
			.o-col-#{$i}#{$suffix} {
				width: $widthPercentage;
				padding-left:$gutter / 2;
				padding-right:$gutter / 2;
				clear:none;
			}

		}
		@else
		{
			// Example o-col-6
			.o-col-#{$i} {
				width: $widthPX;
				padding-left: $gutter / 2;
				padding-right: $gutter / 2;
				clear:none; 
			}
		}
	}
}


// CREATE COLUMN OFFSETS  MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_offsets($suffix, $responsive, $maxWidth, $columns, $gutter) {

	// Calculate single column width in pixels
	$widthPX: $maxWidth / $columns;

	// Calculate single column width in percentage
	$widthPercentageSingle: ($widthPX / $maxWidth) * 100%;

	// Define Grid Offsets
	@for $i from 1 to $columns {

		// Calculate responsive grid sizes if required
		@if $responsive == true {

			// Multiple width % by the column size
			$widthPercentage: $widthPercentageSingle * $i;

			// Example u-col-offset-4@md
			.o-col-offset-#{$i}#{$suffix}	{
				margin-left:$widthPercentage !important;
			}

		}
		@else {
			// Example u-col-offset-4
			.o-col-offset-#{$i}	{
				margin-left:$widthPX !important;
			}
		}
	}
}


// CREATE GRID UTILITY CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_utilities($suffix) {
	.o-col-clear#{$suffix} {
		clear:both;
	}
}


// GENERATE DEFAULT CONTAINER AND COLUMN CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

@include create_container($responsive, $maxWidth, $columns, $gutter, $containerPadding);
@include create_row($gutter);
@include create_columns(null, $responsive, $maxWidth, $columns, $gutter);
@include create_offsets(null, $responsive, $maxWidth, $columns, $gutter);
@include create_utilities(null);


// GENERATE RESPONSIVE CONTAINER AND GRID CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

// Generate repsonsive classes and containers. If we need to change grid as per responsive container config redefine variables
@each $bp-name, $bp-value in $breakpoints	{

	// If we discover that a morph comes into play override grid variables
	@if variable-exists(gridResponsive) {
		@if map-has-key($gridResponsive, $bp-name) {

			// Get grid match
			$bp-obj: map-get($gridResponsive, $bp-name);

			$maxWidth: map-get($bp-obj, "max-width");
			$columns: map-get($bp-obj, "columns");
			$gutter: map-get($bp-obj, "gutter");
			$padding: map-get($bp-obj, "padding");

			@include bp(#{$bp-name}) {
				@include create_container($responsive, $maxWidth, $columns, $gutter, $containerPadding);
				@include create_row($gutter);	
			}
		}
	}

	@include bp(#{$bp-name}) {
		@include create_columns(\@#{$bp-name}, $responsive, $maxWidth, $columns, $gutter);
		@include create_offsets(\@#{$bp-name}, $responsive, $maxWidth, $columns, $gutter);
		@include create_utilities(\@#{$bp-name});	
	}
}